
file : /* empty */
     | file struct ;
     | file var ;
     | file var = exp ;
     | file function
     ;
   
//---------------------------------------
// STRUCT 
//---------------------------------------

struct : id { struct' }
       ;

struct' : var ; struct'
        | /* empty */
        ;

//---------------------------------------
// STATEMENT
//---------------------------------------

stm : con_stm
    | while exp stm
    | stm_lst
    | exp ;
    | struct ;
    | var ;
    | var = exp ;
    | ;
    ;
    
con_stm : if exp stm con_stm'
        ;

con_stm' : elif exp stm con_stm'
         | else stm
         | /* empty */
         ;
 
stm_lst : { stm_lst' }
        ;
        
stm_lst' : stm stm_lst'
         | /* empty */
         ;
              
//---------------------------------------
// VARIABLE
//---------------------------------------

var : id : type
    ;

//---------------------------------------
// TYPE
//---------------------------------------

type : i8 type'
     | u8 type'
     | i16 type'
     | u16 type'
     | i32 type'
     | u32 type'
     | i64 type'
     | u64 type'
     | f32 type'
     | f64 type'
     | void type'
     | id type'
     | [type; exp] type'
     | function_type type'
     ;
     
type' : * type'
      | /* empty */
      ;
     
function_type : ( )
              | ( ) -> type
              | ( function_type' )
              | ( function_type' ) -> type
              ;

function_type' : type , function_type'
               | type
               ;

//---------------------------------------
// FUNCTION
//---------------------------------------

function : id ( ) stm
         | id ( ) -> type stm
         | id ( function' ) stm
         | id ( function' ) -> type stm
         ;

function' : var , function'
          | var

//---------------------------------------
// EXPRESSION 
//---------------------------------------

p_exp : int_l
      | float_l
      | string_l
      | id
      | sizeof ( type )
      | ++ exp
      | -- exp
      | + exp
      | - exp
      | ! exp
      | ~ exp
      | < type > exp
      | * exp
      | & exp
      | ( exp )
      ;
      
exp : p_exp . p_exp
    | p_exp -> p_exp 
    | p_exp [ p_exp ] 
    | p_exp ( arg_lst )
    | p_exp mult p_exp 
    | p_exp div p_exp 
    | p_exp mod p_exp 
    | p_exp add p_exp 
    | p_exp sub p_exp 
    | p_exp ls p_exp 
    | p_exp rs p_exp 
    | p_exp lt p_exp 
    | p_exp gt p_exp 
    | p_exp <= p_exp 
    | p_exp >= p_exp 
    | p_exp == p_exp 
    | p_exp != p_exp 
    | p_exp band p_exp 
    | p_exp bxor p_exp 
    | p_exp bor p_exp 
    | p_exp and p_exp 
    | p_exp or p_exp 
    | p_exp = p_exp 
    | p_exp += p_exp 
    | p_exp -= p_exp 
    | p_exp *= p_exp 
    | p_exp /= p_exp 
    | p_exp %= p_exp 
    | p_exp <<= p_exp 
    | p_exp >>= p_exp 
    | p_exp &= p_exp 
    | p_exp ^= p_exp 
    | p_exp |= p_exp 
    ;
     
arg_lst : exp , arg_lst
        | exp 
        ;